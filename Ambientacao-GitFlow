# üöÄ Guia Completo de Gitflow para a Equipe de Desenvolvimento

Ol√°, equipe! üëã

Este guia detalhado tem como objetivo apresentar e padronizar o uso do **Gitflow**, um modelo de ramifica√ß√£o (branching model) robusto e amplamente adotado, para otimizar nosso fluxo de desenvolvimento. Compreender e aplicar o Gitflow nos ajudar√° a manter nosso c√≥digo organizado, facilitar a colabora√ß√£o, gerenciar vers√µes de forma eficaz e garantir a estabilidade do nosso software.

---

## üìú Sum√°rio

* [O que √© Gitflow?](#ü§î-o-que-√©-gitflow)
* [Por que usar Gitflow?](#-por-que-usar-gitflow)
* [As Branches do Gitflow](#üå≥-as-branches-do-gitflow)
    * [Branches Principais](#branches-principais)
    * [Branches de Suporte](#branches-de-suporte-tempor√°rias)
* [üîÑ Fluxo de Trabalho na Pr√°tica com Exemplos](#üîÑ-fluxo-de-trabalho-na-pr√°tica-com-exemplos)
    * [Cen√°rio 1: Iniciando o Projeto](#cen√°rio-1-iniciando-o-projeto)
    * [Cen√°rio 2: Desenvolvendo uma Nova Funcionalidade (`feature`)](#cen√°rio-2-desenvolvendo-uma-nova-funcionalidade-feature)
    * [Cen√°rio 3: Preparando um Release (`release`)](#cen√°rio-3-preparando-um-release-release)
    * [Cen√°rio 4: Corrigindo um Bug Cr√≠tico em Produ√ß√£o (`hotfix`)](#cen√°rio-4-corrigindo-um-bug-cr√≠tico-em-produ√ß√£o-hotfix)
* [üõ†Ô∏è Comandos Git Essenciais no Gitflow](#Ô∏è-comandos-git-essenciais-no-gitflow)
* [‚úÖ Benef√≠cios Resumidos do Gitflow](#‚úÖ-benef√≠cios-resumidos-do-gitflow)
* [‚ö†Ô∏è Considera√ß√µes Importantes](#‚ö†Ô∏è-considera√ß√µes-importantes)
* [ü§ù Pr√≥ximos Passos e D√∫vidas](#ü§ù-pr√≥ximos-passos-e-d√∫vidas)

---

## ü§î O que √© Gitflow?

Gitflow √© um modelo de ramifica√ß√£o para o Git, proposto por Vincent Driessen. Ele estabelece uma estrutura clara de branches e define como elas devem interagir ao longo do ciclo de vida do desenvolvimento de software. Seu principal objetivo √© trazer organiza√ß√£o e controle, desde a concep√ß√£o de novas funcionalidades at√© o lan√ßamento de vers√µes est√°veis e a aplica√ß√£o de corre√ß√µes urgentes.

### üåü Por que usar Gitflow?

* **Desenvolvimento Paralelo Eficaz:** Permite que m√∫ltiplos desenvolvedores trabalhem em diferentes funcionalidades simultaneamente, sem causar conflitos diretos no c√≥digo principal.
* **Colabora√ß√£o Simplificada:** Facilita a integra√ß√£o do trabalho de diversos membros da equipe de forma estruturada.
* **Hist√≥rico de Vers√µes Limpo:** A branch principal (`master`/`main`) reflete apenas as vers√µes de produ√ß√£o, mantendo um hist√≥rico claro e significativo.
* **Processo de Release Organizado:** Define um fluxo espec√≠fico para a prepara√ß√£o e o lan√ßamento de novas vers√µes do software.
* **Corre√ß√µes R√°pidas e Seguras:** Proporciona um mecanismo isolado para corrigir bugs cr√≠ticos em produ√ß√£o sem interferir no desenvolvimento de novas features.

---

## üå≥ As Branches do Gitflow

O Gitflow se baseia em duas branches principais de longa dura√ß√£o e diversas branches de suporte tempor√°rias, cada uma com um prop√≥sito bem definido.

### Branches Principais

1.  **`master` (ou `main`)** ü•á
    * **Prop√≥sito:** Cont√©m o c√≥digo que est√° **em produ√ß√£o**. Cada commit nesta branch representa uma nova vers√£o est√°vel e testada do software.
    * **Tags de Vers√£o:** Cada merge na `master` deve ser acompanhado de uma tag de vers√£o (ex: `v1.0.0`, `v1.0.1`, `v2.0.0`).
    * **Origem:** Geralmente, √© a branch padr√£o criada com o reposit√≥rio.
    * **Intera√ß√£o:** Recebe merges **exclusivamente** de branches `release` ou `hotfix`.
    > **Importante:** Nunca se deve fazer commit diretamente na branch `master`. Ela √© o reflexo fiel do que est√° em produ√ß√£o.

2.  **`develop`** üõ†Ô∏è
    * **Prop√≥sito:** √â a branch de **integra√ß√£o cont√≠nua**. Aqui s√£o consolidadas todas as funcionalidades que foram desenvolvidas e aprovadas, representando o estado mais atual do c√≥digo que est√° sendo preparado para o pr√≥ximo release.
    * **Origem:** Criada a partir da `master`.
    * **Intera√ß√£o:** Recebe merges de branches `feature` e, ocasionalmente, `hotfix`. √â a base para a cria√ß√£o de branches `release`.
    > **Importante:** Assim como na `master`, evite commits diretos na `develop`. As altera√ß√µes devem vir de merges de outras branches.

### Branches de Suporte (Tempor√°rias)

Estas branches t√™m um ciclo de vida limitado: s√£o criadas para uma finalidade espec√≠fica e, uma vez cumprido seu objetivo, s√£o exclu√≠das.

1.  **`feature/*` (ex: `feature/autenticacao-jwt`)** ‚ú®
    * **Prop√≥sito:** Desenvolver **novas funcionalidades** de forma isolada.
    * **Origem:** Sempre criada a partir da branch `develop`.
    * **Destino (Merge):** Mesclada de volta na `develop` ap√≥s a conclus√£o e testes.
    * **Conven√ß√£o de Nomenclatura:** `feature/nome-descritivo-da-funcionalidade` (ex: `feature/novo-dashboard-usuario`, `feature/integracao-api-pagamentos`).
    * **Ciclo de Vida:** Existe apenas durante o desenvolvimento da funcionalidade. Ap√≥s o merge para `develop`, pode ser exclu√≠da (local e remotamente).

2.  **`release/*` (ex: `release/v1.2.0`)** ·Éî·Éõ
    * **Prop√≥sito:** Preparar uma **nova vers√£o para produ√ß√£o**. Nesta branch, o foco √© em estabiliza√ß√£o: s√£o realizadas apenas corre√ß√µes de bugs menores, ajustes finais, atualiza√ß√µes de documenta√ß√£o e metadados para o lan√ßamento (como o n√∫mero da vers√£o).
    * **Origem:** Criada a partir da `develop` quando esta atinge um estado desejado e est√°vel para um novo release.
    * **Destino (Merge):**
        * Ap√≥s a finaliza√ß√£o e aprova√ß√£o, √© mesclada na `master` (e recebe uma tag de vers√£o).
        * Tamb√©m √© mesclada de volta na `develop` para garantir que quaisquer corre√ß√µes feitas durante a fase de release sejam incorporadas ao fluxo principal de desenvolvimento.
    * **Conven√ß√£o de Nomenclatura:** `release/versao-do-release` (ex: `release/v1.0.0`, `release/v2.1.3`).
    * **Ciclo de Vida:** Existe enquanto a vers√£o est√° sendo preparada. Ap√≥s os merges para `master` e `develop`, √© exclu√≠da.
    > **Aten√ß√£o:** Nenhuma nova funcionalidade deve ser adicionada a uma branch `release`. O foco √© apenas na prepara√ß√£o do que j√° foi desenvolvido.

3.  **`hotfix/*` (ex: `hotfix/correcao-login-urgente`)** ü©π
    * **Prop√≥sito:** Corrigir **bugs cr√≠ticos identificados em produ√ß√£o** de forma r√°pida e isolada.
    * **Origem:** Sempre criada a partir da `master`, especificamente da tag da vers√£o que est√° em produ√ß√£o e precisa da corre√ß√£o.
    * **Destino (Merge):**
        * Ap√≥s a corre√ß√£o, √© mesclada na `master` (e recebe uma nova tag de vers√£o, geralmente incrementando o patch, ex: `v1.0.0` -> `v1.0.1`).
        * Tamb√©m √© mesclada de volta na `develop` (ou na branch `release` ativa, se houver uma) para assegurar que a corre√ß√£o seja inclu√≠da nas futuras vers√µes e no desenvolvimento corrente.
    * **Conven√ß√£o de Nomenclatura:** `hotfix/descricao-breve-do-bug` ou `hotfix/versao-corrigida` (ex: `hotfix/vulnerabilidade-sql-injection`, `hotfix/v1.0.1`).
    * **Ciclo de Vida:** Existe apenas o tempo necess√°rio para aplicar e testar a corre√ß√£o. Ap√≥s os merges, √© exclu√≠da.

---

## üîÑ Fluxo de Trabalho na Pr√°tica com Exemplos

Vamos visualizar como o Gitflow funciona no dia a dia com alguns cen√°rios comuns.

### Cen√°rio 1: Iniciando o Projeto

1.  **Cria√ß√£o do Reposit√≥rio e Branch `master`:**
    * Ao criar um novo reposit√≥rio, a branch `master` (ou `main`) √© geralmente a primeira.
    * Um commit inicial pode ser feito (ex: `README.md`, `.gitignore`).

    ```bash
    # No seu diret√≥rio de projeto local
    git init
    git add .
    git commit -m "Initial commit: Configura√ß√£o b√°sica do projeto e README"
    # (Opcional, mas boa pr√°tica) Criar uma tag para a vers√£o inicial, mesmo que simples
    git tag -a v0.1.0 -m "Vers√£o inicial do projeto"
    # Enviar para o reposit√≥rio remoto (ex: GitHub)
    git remote add origin <URL_DO_SEU_REPOSITORIO_REMOTO>
    git push -u origin master --tags
    ```

2.  **Cria√ß√£o da Branch `develop`:**
    * A branch `develop` √© criada a partir da `master`.

    ```bash
    git checkout -b develop master
    git push -u origin develop
    ```
    * Neste momento, `master` e `develop` apontam para o mesmo commit.

---

### Cen√°rio 2: Desenvolvendo uma Nova Funcionalidade (`feature`)

* **Contexto:** Precisamos implementar um novo sistema de perfil de usu√°rio.

1.  **Atualizar `develop` e Criar a Branch `feature`:**
    * Antes de iniciar qualquer nova feature, garanta que sua branch `develop` local est√° sincronizada com a remota.

        ```bash
        git checkout develop
        git pull origin develop
        ```
    * Crie a nova branch `feature` a partir da `develop`:

        ```bash
        # Exemplo de nome: feature/perfil-usuario
        git checkout -b feature/perfil-usuario develop
        ```

2.  **Desenvolver a Funcionalidade:**
    * Realize os commits necess√°rios na sua branch `feature/perfil-usuario`.

        ```bash
        # ... (codifica a funcionalidade) ...
        git add .
        git commit -m "feat: Adiciona estrutura inicial da p√°gina de perfil"
        # ... (continua codificando e testando) ...
        git add .
        git commit -m "feat: Implementa edi√ß√£o de dados do perfil do usu√°rio"
        # Envie sua branch feature para o reposit√≥rio remoto (bom para backup e colabora√ß√£o/PR)
        git push -u origin feature/perfil-usuario
        ```

3.  **Finalizar a `feature` (Merge para `develop`):**
    * Quando a funcionalidade estiver completa, testada e aprovada (por exemplo, atrav√©s de um Pull Request):
        1.  **Atualize `develop` novamente** (caso outros colegas tenham integrado novas features):
            ```bash
            git checkout develop
            git pull origin develop
            ```
        2.  **Integre `develop` na sua `feature` (opcional, mas recomendado para resolver conflitos localmente antes):**
            ```bash
            git checkout feature/perfil-usuario
            git pull origin feature/perfil-usuario # Garante que sua branch local est√° atualizada
            git merge develop
            # (Resolva quaisquer conflitos que surgirem aqui)
            # git push origin feature/perfil-usuario # Atualiza a branch remota com os conflitos resolvidos
            ```
        3.  **Fa√ßa o merge da `feature` na `develop`:**
            √â **altamente recomendado** usar a flag `--no-ff` (no fast-forward). Isso cria um "merge commit", que agrupa todos os commits da feature e mant√©m o hist√≥rico mais claro, indicando explicitamente que aqueles commits vieram de uma branch espec√≠fica.

            ```bash
            git checkout develop
            # Se voc√™ n√£o fez o passo anterior de integrar develop na feature, fa√ßa pull da feature atualizada
            # git pull origin feature/perfil-usuario (se estiver fazendo merge de uma branch remota)
            git merge --no-ff feature/perfil-usuario -m "Merge feature/perfil-usuario: Implementa sistema de perfil de usu√°rio"
            git push origin develop
            ```
        4.  **Excluir a branch `feature`** (para manter o reposit√≥rio limpo):
            ```bash
            git branch -d feature/perfil-usuario          # Exclui localmente
            git push origin --delete feature/perfil-usuario # Exclui remotamente
            ```

---

### Cen√°rio 3: Preparando um Release (`release`)

* **Contexto:** A branch `develop` acumulou v√°rias funcionalidades (incluindo o perfil de usu√°rio) e est√° pronta para o lan√ßamento da vers√£o `v1.0.0`.

1.  **Criar a Branch `release` a partir da `develop`:**
    * Garanta que a `develop` local esteja atualizada.

        ```bash
        git checkout develop
        git pull origin develop
        ```
    * Crie a branch `release`:

        ```bash
        # Exemplo de nome: release/v1.0.0
        git checkout -b release/v1.0.0 develop
        git push -u origin release/v1.0.0
        ```
    > **Ponto de Partida:** A partir deste momento, a branch `release/v1.0.0` √© "congelada" para novas funcionalidades. Apenas corre√ß√µes de bugs relacionadas a este release e preparativos finais s√£o permitidos.

2.  **Finalizar o Release (Testes Finais, Bug Fixes, Documenta√ß√£o):**
    * Nesta branch, a equipe foca em:
        * Testes exaustivos.
        * Corre√ß√£o de bugs menores descobertos durante os testes.
        * Atualiza√ß√£o de documenta√ß√£o (changelog, vers√£o em arquivos de configura√ß√£o, etc.).

        ```bash
        # Exemplo: Corrigindo um bug visual encontrado nos testes finais
        # ... (faz a corre√ß√£o na branch release/v1.0.0) ...
        git add .
        git commit -m "fix: Corrige alinhamento do rodap√© na p√°gina de perfil"

        # Exemplo: Atualizar o n√∫mero da vers√£o em um arquivo de configura√ß√£o
        # ... (atualiza o arquivo de vers√£o) ...
        git add .
        git commit -m "chore: Atualiza n√∫mero da vers√£o para 1.0.0 nos arquivos do projeto"
        git push origin release/v1.0.0
        ```

3.  **Merge do Release Finalizado:**
    * Quando a branch `release/v1.0.0` estiver completamente testada, est√°vel e aprovada:
        1.  **Merge na `master`:**
            ```bash
            git checkout master
            git pull origin master
            # Use --no-ff para um hist√≥rico claro do merge do release
            git merge --no-ff release/v1.0.0 -m "Merge release/v1.0.0: Lan√ßamento da vers√£o 1.0.0"
            git push origin master
            ```
        2.  **Criar uma Tag de Vers√£o na `master`:**
            √â crucial marcar este ponto na `master` com uma tag.

            ```bash
            git tag -a v1.0.0 -m "Release da vers√£o 1.0.0"
            git push origin v1.0.0 # Envia a tag espec√≠fica
            # ou git push origin --tags # Envia todas as tags locais que n√£o est√£o no remoto
            ```
        3.  **Merge de Volta na `develop`:**
            Quaisquer corre√ß√µes ou ajustes feitos na branch `release` precisam ser incorporados de volta na `develop` para que n√£o se percam e estejam presentes no pr√≥ximo ciclo de desenvolvimento.

            ```bash
            git checkout develop
            git pull origin develop
            git merge --no-ff release/v1.0.0 -m "Merge release/v1.0.0: Incorpora ajustes e corre√ß√µes do release na develop"
            git push origin develop
            ```
        4.  **Excluir a branch `release`:**
            ```bash
            git branch -d release/v1.0.0
            git push origin --delete release/v1.0.0
            ```

---

### Cen√°rio 4: Corrigindo um Bug Cr√≠tico em Produ√ß√£o (`hotfix`)

* **Contexto:** A vers√£o `v1.0.0` est√° em produ√ß√£o, mas um bug cr√≠tico foi descoberto, impedindo usu√°rios de redefinir suas senhas.

1.  **Criar a Branch `hotfix` a partir da `master` (da tag da vers√£o afetada):**
    * √â fundamental criar a branch `hotfix` a partir da tag exata da `master` que est√° em produ√ß√£o e apresenta o problema.

        ```bash
        git checkout master
        git pull origin master # Garante que a master local est√° atualizada
        # Cria a hotfix a partir da tag v1.0.0
        git checkout -b hotfix/redefinicao-senha-v1.0.1 v1.0.0
        git push -u origin hotfix/redefinicao-senha-v1.0.1
        ```

2.  **Aplicar a Corre√ß√£o:**
    * Fa√ßa a corre√ß√£o do bug e commite na branch `hotfix`.

        ```bash
        # ... (corrige o bug na branch hotfix/redefinicao-senha-v1.0.1) ...
        git add .
        git commit -m "fix: Corrige falha cr√≠tica na redefini√ß√£o de senha"
        # (Opcional, mas comum) Atualizar o n√∫mero da vers√£o para o patch (ex: v1.0.1) em arquivos de configura√ß√£o
        # ... (atualiza vers√£o para 1.0.1) ...
        git add .
        git commit -m "chore: Incrementa vers√£o para 1.0.1 devido a hotfix"
        git push origin hotfix/redefinicao-senha-v1.0.1
        ```

3.  **Finalizar o `hotfix`:**
    * Ap√≥s a corre√ß√£o ser testada e aprovada:
        1.  **Merge na `master`:**
            ```bash
            git checkout master
            git pull origin master
            git merge --no-ff hotfix/redefinicao-senha-v1.0.1 -m "Merge hotfix/redefinicao-senha-v1.0.1: Corrige bug cr√≠tico na redefini√ß√£o de senha"
            git push origin master
            ```
        2.  **Criar uma Nova Tag de Vers√£o na `master`:**
            A corre√ß√£o gerou uma nova vers√£o de patch.

            ```bash
            git tag -a v1.0.1 -m "Vers√£o 1.0.1 - Corre√ß√£o cr√≠tica na redefini√ß√£o de senha"
            git push origin v1.0.1
            ```
        3.  **Merge de Volta na `develop`:**
            Para garantir que a corre√ß√£o tamb√©m seja incorporada no desenvolvimento cont√≠nuo.

            ```bash
            git checkout develop
            git pull origin develop
            git merge --no-ff hotfix/redefinicao-senha-v1.0.1 -m "Merge hotfix/redefinicao-senha-v1.0.1: Incorpora corre√ß√£o da redefini√ß√£o de senha na develop"
            git push origin develop
            ```
            > **Nota:** Se uma branch `release` estiver ativa no momento do `hotfix`, pode ser necess√°rio fazer o merge do `hotfix` nela tamb√©m, para que a corre√ß√£o n√£o seja perdida quando o release for finalizado. A decis√£o depende da urg√™ncia e do estado do release.

        4.  **Excluir a branch `hotfix`:**
            ```bash
            git branch -d hotfix/redefinicao-senha-v1.0.1
            git push origin --delete hotfix/redefinicao-senha-v1.0.1
            ```

---

## üõ†Ô∏è Comandos Git Essenciais no Gitflow

A tabela abaixo resume os comandos Git mais utilizados em cada etapa do Gitflow:

| A√ß√£o                                      | Comando Git                                                                 |
| :---------------------------------------- | :-------------------------------------------------------------------------- |
| Mudar para uma branch existente           | `git checkout <nome-da-branch>`                                             |
| Criar nova branch e mudar para ela        | `git checkout -b <nova-branch> <branch-de-origem>`                          |
| Listar branches locais                    | `git branch`                                                                |
| Listar todas as branches (locais/remotas) | `git branch -a`                                                             |
| Excluir branch local (ap√≥s merge)         | `git branch -d <nome-da-branch>`                                            |
| For√ßar exclus√£o de branch local           | `git branch -D <nome-da-branch>`                                            |
| Enviar branch local para o remoto         | `git push -u origin <nome-da-branch>` (o `-u` na primeira vez)                |
| Excluir branch remota                     | `git push origin --delete <nome-da-branch>`                                 |
| Atualizar branch local com a remota       | `git pull origin <nome-da-branch>`                                          |
| Mesclar uma branch na branch atual        | `git merge <branch-a-ser-mesclada>`                                         |
| Mesclar com "merge commit" (recomendado)  | `git merge --no-ff <branch-a-ser-mesclada> -m "Mensagem do merge commit"` |
| Criar tag anotada (recomendado)           | `git tag -a <nome-tag> -m "Descri√ß√£o da tag"`                             |
| Enviar tag espec√≠fica para o remoto       | `git push origin <nome-tag>`                                                |
| Enviar todas as tags para o remoto        | `git push origin --tags`                                                    |

> **Dica:** Existem ferramentas como `git-flow-avh` (uma extens√£o do Git) que automatizam muitos desses comandos, simplificando a execu√ß√£o do Gitflow. Podemos explorar seu uso se houver interesse.

---

## ‚úÖ Benef√≠cios Resumidos do Gitflow

* **Clareza e Organiza√ß√£o:** Define pap√©is claros para cada branch, tornando o fluxo de trabalho previs√≠vel.
* **Desenvolvimento Paralelo:** M√∫ltiplas features podem ser desenvolvidas em isolamento sem interfer√™ncias.
* **Estabilidade em Produ√ß√£o:** A branch `master` sempre reflete um estado est√°vel e testado do software.
* **Hist√≥rico Significativo:** O uso de merge commits (`--no-ff`) e tags de vers√£o cria um hist√≥rico de projeto leg√≠vel e f√°cil de auditar.
* **Gerenciamento de Releases Simplificado:** Facilita a prepara√ß√£o, teste e lan√ßamento de novas vers√µes.
* **Manuten√ß√£o Eficaz:** Permite corre√ß√µes r√°pidas em produ√ß√£o (`hotfix`) sem interromper o desenvolvimento de novas features na `develop`.

---

## ‚ö†Ô∏è Considera√ß√µes Importantes

* **Complexidade Inicial:** Para projetos muito pequenos ou equipes de uma √∫nica pessoa, o Gitflow pode parecer um pouco burocr√°tico. Nesses cen√°rios, modelos mais simples como o *GitHub Flow* ou *GitLab Flow* podem ser mais adequados.
* **Disciplina da Equipe:** O sucesso do Gitflow depende da compreens√£o e ades√£o de todos os membros da equipe ao fluxo estabelecido.
* **Merge Commits:** Embora o `--no-ff` seja crucial para a clareza do hist√≥rico, √© importante garantir que as mensagens de merge sejam descritivas.

---

## ü§ù Pr√≥ximos Passos e D√∫vidas

Este guia serve como nossa refer√™ncia principal para o Gitflow. √â fundamental que todos se familiarizem com os conceitos e comandos apresentados.

* **Pratiquem:** Tentem simular os cen√°rios descritos em um reposit√≥rio de teste.
* **Perguntem:** N√£o hesitem em tirar d√∫vidas. Uma boa comunica√ß√£o √© chave para o sucesso.
* **Colaborem:** Ajudem uns aos outros a seguir o fluxo corretamente.

Estamos √† disposi√ß√£o para discutir qualquer ponto e ajudar na adapta√ß√£o a este fluxo de trabalho. O objetivo final √© termos um processo de desenvolvimento mais eficiente, organizado e colaborativo! üöÄ
